#pragma once
#pragma once
// Pam_param.cpp: Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.

#include"Gauss.h" //Підключення бібліотеки
#include<iostream> //Підключення стандартної бібліотеки
using namespace std; //Підключення стандартного простору імен

/// <summary> Переверзова Є.А. </summary>

/// <summary><c>input</c> є функцією-процедурою, що не повертає ніякого значення.
/// <param name="a[3][3]">Використовується для позначення матриці А.</param>
/// <param name="b[3]">Використовується для позначення стовпчика В.</param>
/// <param name="n">Використовується для позначення розміру матриці.</param>
/// </summary>
void input(int a[3][3], int b[3], int n) //Введення матриці та стовпчика
{
	setlocale(LC_ALL, "Russian"); //Підключення кирилиці
	cout << "\n Матрица A: " << endl; //Виведення підказки для введення матриці а
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку	
	{
		for (int j = 0; j < n; j++) //Внутрішній цикл по стовпцю
		{
			cout << "\n a[" << i + 1 << "][" << j + 1 << "]= "; //Виведення підказки для введення елементів матриці а
			cin >> a[i][j]; //Введення елементів матриці а
		}
	}
	cout << endl;
	cout << "Столбик В: " << endl; //Виведення підказки для введення стовпчика b
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		cout << "\n b[" << i + 1 << "]= "; //Виведення підказки для введення елементів матриці b
		cin >> b[i]; //Введення елементів матриці b
	}
	cout << endl;
}

/// <summary><c>output</c> є функцією-процедурою, що не повертає ніякого значення.
/// <param name="a[3][3]">Використовується для позначення матриці А.</param>
/// <param name="b[3]">Використовується для позначення стовпчика В.</param>
/// <param name="n">Використовується для позначення розміру матриці.</param>
/// </summary>
void output(int a[3][3], int b[3], int n) //Виведення матриці та стовпчика
{
	setlocale(LC_ALL, "Russian"); //Підключення кирилиці
	cout << "\n Матрица A: " << endl; //Виведення інформації про виведення матриці a
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		for (int j = 0; j < n; j++) //Внутрішній цикл по стовпцю
		{
			cout << a[i][j] << " "; //Виведення елементів матриці а через пробіл
		}
		cout << endl;
	}
	cout << endl;
	cout << "Столбик В: " << endl; //Виведення стовпчика b
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		cout << b[i] << endl; //Виведення елементів стовпця b
	}
}

/// <summary><c>Mul</c> є структурою.
/// </summary>
struct Mul //Структура
{
	int c = 1; //Значення добутку (для головної діагоналі)
	int m = 1; //Значення добутку (для побічної діагоналі)
};

/// <summary><c>search_1</c> є функцією, що повертає значення головного визначника det.
/// <param name="a[3][3]">Використовується для позначення матриці А.</param>
/// <param name="n">Використовується для позначення розміру матриці.</param>
/// <param name="z">Використовується для позначення параметра циклів по знаходженню визначників матриць та х.</param>
/// <param name="j">Використовується для позначення параметра циклу for.</param>
/// <param name="det">Використовується для позначення значення головного визначника.</param>
/// <returns>Повертає det.</returns>
/// </summary>
int search_1(int a[3][3], int n, int z, int j, int det) //Знаходження визначника матриці(det)
{
	//Знаходження суми через головну діагональ
	Mul l; //Оголошення змінної структури
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		j = i; //Значення j
		a[i][j] = a[i][j += z]; /*Елементи діагоналі (при першій ітерації циклу використовуються значення елементів головної діагоналі,
								при повторних ітераціях даного циклу беруться значення елементів головної діагоналі, зміщеної на 1 елемент вправо)*/
		if (j >= n) j = j - n; //Змінення значення j за умови
		l.c *= a[i][j]; //Добуток елементів діагоналі
	}
	det += l.c; //Сума добутків елементів діагоналі

				//Знаходження різниці через побічну діагональ
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		j = n - 1 - i; //Значення j
		a[i][j] = a[i][j -= z]; /*Елементи діагоналі (при першій ітерації циклу використовуються значення елементів побічної діагоналі,
								при повторних ітераціях даного циклу беруться значення елементів побічної діагоналі, зміщеної на 1 елемент вліво)*/
		if (j < 0) j = j + n; //Змінення значення j за умови
		l.m *= a[i][j]; //Добуток елементів діагоналі
	}
	det -= l.m; //Різниця добутків елементів діагоналі
	return det; //Повернення значення det
}

/// <summary><c>search_2</c> є функцією-процедурою, що не повертає ніякого значення.
/// <param name="a[3][3]">Використовується для позначення матриці А.</param>
/// <param name="d[3][3]">Використовується для позначення зміненої матриці А.</param>
/// <param name="b[3]">Використовується для позначення стовпчика В.</param>
/// <param name="n">Використовується для позначення розміру матриці.</param>
/// <param name="z">Використовується для позначення параметра циклів по знаходженню визначників матриць та х.</param>
/// </summary>
void search_2(int a[3][3], int d[3][3], int b[3], int n, int z) //Змінення значень елементів стовпця в матриці
{
	cout << "\n Матрица А, с изменением " << z + 1 << "-го столбца на столбец В: " << endl; //Виведення інформації про змінення в матриці
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		for (int j = 0; j < n; j++) //Внутрішній цикл по стовпцю
		{
			d[i][j] = a[i][j]; //Присвоєння елементам матриці d значення елементів матриці а
			d[i][z] = b[i]; //Заміна значень елементів стовпця матриці d на значення єлементів стовпця b
			cout << d[i][j] << " "; //Виведення елементів матриці d через пробіл
		}
		cout << endl;
	}
}

/// <summary><c>search_3</c> є функцією, що повертає значення головного визначника y.
/// <param name="d[3][3]">Використовується для позначення зміненої матриці А.</param>
/// <param name="n">Використовується для позначення розміру матриці.</param>
/// <param name="z">Використовується для позначення параметра циклів по знаходженню визначників матриць та х.</param>
/// <param name="j">Використовується для позначення параметра циклу for.</param>
/// <param name="y">Використовується для позначення значення визначника.</param>
/// <returns>Повертає y.</returns>
/// </summary>
int search_3(int d[3][3], int n, int z, int j, int y) //Знаходження визначників зміненої матриці
{
	//Знаходження суми через головну діагональ
	Mul l; //Оголошення змінної структури
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		j = i; //Значення j
		d[i][j] = d[i][j += z]; /*Елементи діагоналі (при першій ітерації циклу використовуються значення елементів головної діагоналі,
								при повторних ітераціях даного циклу беруться значення елементів головної діагоналі, зміщеної на 1 елемент вправо)*/
		if (j >= n) j = j - n; //Змінення значення j за умови
		l.c *= d[i][j]; //Добуток елементів діагоналі
	}
	y += l.c; //Сума добутків елементів діагоналі

			  //Знаходження різниці через побічну діагональ
	for (int i = 0; i < n; i++) //Зовнішній цикл по рядку
	{
		j = n - 1 - i; //Значення j
		d[i][j] = d[i][j -= z]; /*Елементи діагоналі (при першій ітерації циклу використовуються значення елементів побічної діагоналі,
								при повторних ітераціях даного циклу беруться значення елементів побічної діагоналі, зміщеної на 1 елемент вліво)*/
		if (j < 0) j = j + n; //Змінення значення j за умови
		l.m *= d[i][j]; //Добуток елементів діагоналі
	}
	y -= l.m; //Різниця добутків елементів діагоналі
	return y; //Повернення значення y
}

/// <summary><c>main</c> є головною функцією.
/// <returns>Повертає 0.</returns>
/// </summary>
int main1()
{
	setlocale(LC_ALL, "Russian"); //Підключення кирилиці
	int a[3][3], d[3][3], b[3]; //Дійсні змінні
	int n = 3, i = 0, j = 0, z = 0, det = 1, y = 0; //Дійсні змінні
	double x = 0;

	cout << "\n Размер матрицы: "; //Виведення підказки для введення розміру квадратної матриці
	cin >> n; //Введення розміру квадратної матриці
	input(a, b, n); //Виклик функції введення матриці та стовпчика
	output(a, b, n); //Виклик функції виведення матриці та стовпчика

					 //Універсальний вираз для знаходження визначника det
	for (int z = 0; z < n; z++) //Цикл по знаходженню визначника det
	{
		det = search_1(a, n, z, j, det); //Виведення значення det з функції знаходження визначника матриці(det)
	}
	cout << "\n det = " << det << endl; //Виведення значення визначника det
	cout << endl;

	//Універсальний вираз для знаходження інших визначників та x
	for (int z = 0; z < n; z++) //Цикл по знаходженню визначників зміненої матриці та х
	{
		search_2(a, d, b, n, z); //Виклик функції змінення значень елементів стовпця в матриці
		y = 0; //Значення y, перед кожним проходом наступного циклу обнуляється
		for (int z = 0; z < n; z++) //Цикл для знаходження визначників зміненої матриці
		{
			y = search_3(d, n, z, j, y); //Виведення значення y з функції знаходження визначників зміненої матриці
		}
		cout << "\n Определитель  det[" << z + 1 << "], который был найден при изменении " << z + 1 << "-го столбца в матрице: " << y << endl; /*Виведення значень визначників, що
																																			   були знайденні при змінені матриці*/
		x = y / det; //Знаходження х за формулою
		cout << "\n x[" << z + 1 << "] = " << x << endl; //Виведення значення x
		cout << endl;
	}
	return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
